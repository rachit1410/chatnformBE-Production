"""
Django settings for chatnformBE project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from decouple import config
from urllib.parse import urlparse, parse_qsl
import ssl
from storages.backends.s3boto3 import S3Boto3Storage

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", "insecure_secret_key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", "False").lower() in ("true", "1")

ALLOWED_HOSTS = config("ALLOWED_HOSTS", "*").split(",")


# Application definition

INSTALLED_APPS = [
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'django_elasticsearch_dsl',
    'accounts',
    'chat',
    'forms',
    'searching',
    'home',
    'api',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'chatnformBE.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'chatnformBE.wsgi.application'

ASGI_APPLICATION = 'chatnformBE.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASE_URL = urlparse(config('DATABASE_URL'))

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DATABASE_URL.path.replace('/', ''),
        'USER': DATABASE_URL.username,
        'PASSWORD': DATABASE_URL.password,
        'HOST': DATABASE_URL.hostname,
        'PORT': 5432,
        'OPTIONS': dict(parse_qsl(DATABASE_URL.query)),
    }
}

AUTH_USER_MODEL = "accounts.CNFUser"

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Security
# SECURE_SSL_REDIRECT = config("SECURE_SSL_REDIRECT", "True").lower() in ("true", "1")
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# fernet secret key
FERNET_KEY = config("FERNET_KEY")

# cors production only settings

# CORS_ALLOWED_ORIGINS = config("CORS_ALLOWED_ORIGINS", "").split(",")
CORS_ALLOWED_ORIGINS =["http://localhost:5173","http://127.0.0.1:5173"]
CORS_ALLOW_CREDENTIALS = True


# ELASTICSEARCH
ELASTICSEARCH_HOST = config("ELASTICSEARCH_HOST")
ELASTICSEARCH_PORT = config("ELASTICSEARCH_PORT", cast=int, default=9243)
ELASTICSEARCH_USERNAME = config("ELASTICSEARCH_USERNAME")
ELASTICSEARCH_PASSWORD = config("ELASTICSEARCH_PASSWORD")

ELASTICSEARCH_DSL = {
    'default': {
        'hosts': [
            {
                'host': ELASTICSEARCH_HOST,
                'port': ELASTICSEARCH_PORT,
                'scheme': 'https',
            }
        ],
        "basic_auth": (ELASTICSEARCH_USERNAME, ELASTICSEARCH_PASSWORD),
        "verify_certs": True,
        # "ca_certs": "/absolute/path/to/ca.pem",  # if provider gives you a custom cert
    }
}


# settings for channels and kafka

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [config("REDIS_URL")],
        },
    },
}

# kafka configuration
KAFKA_BOOTSTRAP_SERVERS = config("KAFKA_BOOTSTRAP_SERVERS")
KAFKA_SECURITY_PROTOCOL = config('KAFKA_SECURITY_PROTOCOL')
KAFKA_SASL_MECHANISM = config('KAFKA_SASL_MECHANISM')
KAFKA_SASL_USERNAME = config('KAFKA_SASL_USERNAME')
KAFKA_SASL_PASSWORD = config('KAFKA_SASL_PASSWORD')
KAFKA_CA_LOCATION = os.path.join(BASE_DIR, config('KAFKA_CA_LOCATION'))
KAFKA_TOPIC = "messages"
KAFKA_CLIENT_ID = 'chatnforms-client'
# SMTP configration
FROM_EMAIL = config('FROM_EMAIL')

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = int(config("EMAIL_PORT", "587"))
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = config("EMAIL_USE_TLS", "True").lower() in ("true", "1")
EMAIL_USE_SSL = config("EMAIL_USE_SSL", "False").lower() in ("true", "1")

DEFAULT_FROM_EMAIL = config('FROM_EMAIL')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# STATIC & MEDIA
STATIC_URL = "https://cdn.jsdelivr.net/gh/rachit1410/chatnformCHATnFORM-Backend@main/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "public/staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "public/staticfiles")]

# SUPABASE CREDENTIALS

SUPABASE_URL=config("SUPABASE_URL")
SUPABASE_KEY=config("SUPABASE_KEY")
SUPABASE_BUCKET=config("SUPABASE_BUCKET")

DEFAULT_FILE_STORAGE = "accounts.storages.SupabaseStorage"
MEDIA_URL = (
    f"{SUPABASE_URL}/storage/v1/object/public/"
    f"{SUPABASE_BUCKET}/"
)

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'accounts.authentication.HttpOnlyJWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    )
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=int(config("ACCESS_TOKEN_MINUTES", "30"))),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=int(config("REFRESH_TOKEN_DAYS", "7"))),
}

REDIS_URL = config("REDIS_URL")

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": REDIS_URL.split(":")[2].split("@")[0] if "@" in REDIS_URL else None,
            "SSL": True if REDIS_URL.startswith("rediss://") else False,
            "CONNECTION_POOL_KWARGS": {
                "ssl_cert_reqs": ssl.CERT_NONE,   # <- disable verification for dev
            },
        },
        "KEY_PREFIX": "chatnform",
    }
}

# LOGGING
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {"level": "DEBUG", "class": "logging.StreamHandler", "formatter": "simple"},
    },
    "loggers": {
        "django": {"handlers": ["console"], "level": config("DJANGO_LOG_LEVEL", "INFO")},
    },
}

# CELERY
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

CELERY_BROKER_TRANSPORT_OPTIONS = {
    "ssl": {
        "ssl_cert_reqs": ssl.CERT_NONE,   # works with rediss://
    }
}